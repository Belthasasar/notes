# notes
daily update about the classes

      
DATE: 14/02/2024
NOTES

RAM:
  RAM is a primary storage.
  types:
        static RAM - it is faster than Dynamic RAM
        Dynamic RAM
    these are volatile memory.

Microprocessors:
  it is contain the processes only.

Buses:
  it is used to transfer the datas 
  Types:
      I-bus - Instruction bus
      D-bus - Data bus
      S-bus - System bus

Peripheral:
  it is used to communicate to the outside enviornment.
  it is send by using system bus

Microcontroller:
  it is contain I/O,CPU

 Bit-wise Operators:
      AND (&&)
      OR (||)  
      NOT (!)
AND(&) operator:
  zero with anything answer is zero.
  one with one the answer is one.
  It is like a multiplication.
OR(||) operator:
  one with anything answer is one.
  zero with zero the answer is zero.
  it is like a addition.
NOT(!) operator:
  it is return answer's opposite

Truth table
 A B AND OR 
(A & B) (A | B) 
0 0 0 0 
0 1 0 1 
1 0 0 1 
1 1 1 1 

GPIO - general purpose input output
  it is used for
      reading digital signal
      issuing interurupts
      generating triggers for external components

GPIO pin:
    value consist of one of two voltage settings use can program each pin 

GPIO port:
     many pins join together is called port

Multiplexing:
    pins act as GPIO,UART etc...

Input buffer:
    0 is enable to the input buffer

output buffer:
    1 is enable the output buffer.

IC state:
    you cannot predict the pin is high/low 
    this is called IC state.

    used in pull up (or) pull down register to stable the input mode

Output mode:
         open Drain State

        =>Pull up  resistor ------>always use or give 0 not 1
         *Gate Drain Source(GDS)
            
                         (or)
  =>PUSH PULL CONFIGURATION(AUTOMATIC)
       *Enable (activate) the clock to access the pin.
       Example: GPIO PORT H -->To activate this pin ,we enable the AHB1’S clock to access as it is connected to (AHB1 => Bus)

PROGRAM:-
     RCC->AHB1ENR  |= 1;
       |__>RCC->AHB1ENR = RCC->AHB1ENR | 1;
       (or)


     RCC->AHB1ENR  |=(1<<28);
                       
       (or)
      #define PA5_enable  (1<<28);
      RCC->AHB1ENR |= PA5_enable;

      GPIOA  -> MODER  |= (0<<11)
      GPIOA  -> MODER  |= (0<<10)


             LED BLINKING PROGRAM:
     
#include "stm32f4xx.h"
void delayMs(int n);
int main(void) 
{
    RCC->AHB1ENR |= 1; /* enable GPIOA clock */
   GPIOA->MODER &= ~0x00000C00;    
    GPIOA->MODER |=0x00000400; 
while(1)
 {
     GPIOA->ODR |= 0x00000020; 
     delayMs(500);
     GPIOA->ODR &= ~0x00000020; 
     delayMs(500);
  }
}
/* 16 MHz SYSCLK */
 void delayMs(int n) 
 {
 int i;
for (; n > 0; n--)
for (i = 0; i < 3195; i++) ;
 }


DATE: 15/02/2024
NOTES



﻿GPIO -------------->Have 7 memory space and address,that memory space is called Registers


GPIOA------------>0x4002 0000  -  0x4002 03FF
 
                                                      |
                           All registers for GPIOA have been inside
 
Different address space but only one register

Registers:
     ----->MODER
      ------>OTYPER
      ------>PUPDR
      ------>IDR
      ------>ODR
      ------>BSRR
    ------>LCKR
     ------>AFRL
     ------>AFRH

==> GPIOA  base address will be ------> 0x4002 0000
==> When we know that base address of GPIOA and we know that offset 0x00 then we know the place.

A= Base address(20) + offset(2)
then the base address will be A(22)
{base address + offset}

Hexadecimal:
      decimal numbers 0 - 9
      hexadecimal represent the four bits

MODER REGISTER:
      A = base address + offset : 0x00
             start address will be A

OTYPER REGISTER:
       base address + offset : 0x04   --------->Increase by 4  [increase by 4].
                                                                                   UL ---> Unsigned Long

periphereal base|  4002 0000
                                      |
peripheral offset |         2 0000
Base              |         4000 0000

Peripheral Base (Peripheral + AHB1 PERIPH-OFFSET)


*If both address are same the offset will be zero.

[GPIOA-OFFSET =0X0000UL]

GPIOA-Base (AHB1ENR-BASE + GPIO-OFFSET)  
          

* When we use the (Volatile unsigned int *) then we call as address

* When we do the Integer pointer type cast  (RCCBase + AHB1EN_R_OFFSET) will be changed as address.

WE USE OUTSIDE “*   POINTER” IT HELPS TO FIND THE VALUES OF THE ADDRESS 
(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R OFFSET))

(volatile unsigned int *)(RCC_BASE + AHB1EN_R OFFSET)-this line used to creat address

(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R OFFSET))-this line used to access the address of the value.

PROGRAM:

//Where is the led connected?
//Port:  A
//Pin:   5

#define PERIPH_BASE				(0x40000000UL)
#define AHB1PERIPH_OFFSET			(0x00020000UL)
#define AHB1PERIPH_BASE	        		(PERIPH_BASE + AHB1PERIPH_OFFSET)
#define GPIOA_OFFSET				(0x0000UL)

#define GPIOA_BASE				(AHB1PERIPH_BASE + GPIOA_OFFSET)

#define RCC_OFFSET				(0x3800UL)
#define RCC_BASE				      (AHB1PERIPH_BASE + RCC_OFFSET)


#define AHB1EN_R_OFFSET				(0x30UL)
#define RCC_AHB1EN_R            		(*(volatile unsigned int *)(RCC_BASE +  AHB1EN_R_OFFSET))

#define MODE_R_OFFSET				(0x00UL)
#define GPIOA_MODE_R				(*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))


#define OD_R_OFFSET				(0x14UL)
#define GPIOA_OD_R				(*(volatile unsigned int *)(GPIOA_BASE +  OD_R_OFFSET))


#define  GPIOAEN				      (1U<<0) //   0b 0000 0000 0000 0000 0000 0000 0000 0001

#define PIN5					(1U<<5)
#define LED_PIN					 PIN5


/*
 * (1U<<10)  // Set bit 10 to 1
 *  &=~(1U<<11) //  Set bit 11 to 0*/




int main(void)
{
	/*1. Enable clock access to GPIOA*/
	RCC_AHB1EN_R  |=  GPIOAEN;

	/*2.Set PA5 as output pin*/
	GPIOA_MODE_R  |= (1U<<10);  // Set bit 10 to 1
	GPIOA_MODE_R  &=~(1U<<11); //  Set bit 11 to 0

	while(1)
	{
		/*3.Set PA5 high*/
		//GPIOA_OD_R |= LED_PIN;

		/*4:Experiment 2 : toggle PA5*/
		GPIOA_OD_R ^= LED_PIN;
		for(int i=0;i<100000;i++){}

	}
}

16/2/24

__IO -> volatile GPIO typedefGPIO_BASE here GPIO typedef is one structure for different address GPIOA BASE, GPIOB BASE,..... AHB1ENR , The registers above the ABH1ENR should be used for that we will create a dummy , The registers below the ABH1ENR is no need to use. DELAY -> used to blink RR_TYPEDEF -> using structure you cahnge all the values to address.

GPIO_BASE (AHB1PERIPH_BASE + GPIO_OFFSET) When we use the (volatile unsigned int )then we call as address integer poiter typecaste (RCC_BASE + AHB1EN_R_OFFSET)will be changes as address. ((volatile unsigned int *)(RCC_BASE + AHB1EN_R_OFFSET))







  
